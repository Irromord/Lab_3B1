// Простой пример наследования.
// Создать суперкласс.
class A {
int i, j;
void showij() {
System.out.println("i и j: " + i + " " + j);
}
}
// Создать подкласс расширением класса А.
class В extends A {
int k;
void showk() {
System.out.println("k: " + k);
}
void sum() {
System.out.println("i+j+k: " + (i + j + k));
}
}
class Simplelnheritance {
public static void main(String args[]){
A superOb = new A();
В subOb = new В();
// Суперкласс может быть использован сам по себе.
superOb.i = 10;
superOb.j = 20;
System.out.println("Содержимое superOb: ");
superOb.showij();
System.out.println();
/* Подкласс имеет доступ ко всем public-членам
его суперкласса. */
subOb.i = 7;
subOb.j = 8;
subOb.k = 9;
System.out.println("Содержимое of subOb: ");
subOb.showij();
subOb.showk();
System.out.println();
System.out.println("Сумма i, j и k в subOb:");
subOb.sum();
}
}
Подкласс B включает все члены его суперкласса A. Вот почему
объект subOb может обращаться к i и j и вызывать showij(). Поэтому же
внутри sum() можно прямо ссылаться на i и j, как если бы они были
частью B.
