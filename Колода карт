import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

// Класс, представляющий карту
class Card {
    private String suit;  // Масть карты
    private String value; // Значение карты

    public Card(String suit, String value) {
        this.suit = suit;
        this.value = value;
    }

    @Override
    public String toString() {
        return value + " of " + suit;
    }

    // Геттеры для масти и значения карты
    public String getSuit() {
        return suit;
    }

    public String getValue() {
        return value;
    }

    // Методы для сравнения карт
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Card card = (Card) obj;
        return suit.equals(card.suit) && value.equals(card.value);
    }

    @Override
    public int hashCode() {
        return suit.hashCode() + value.hashCode();
    }
}

// Класс, представляющий колоду карт
class Deck {
    private List<Card> cards; // Список карт в колоде

    public Deck() {
        this.cards = new ArrayList<>();
        initializeDeck();
    }

    // Инициализация колоды
    private void initializeDeck() {
        String[] suits = {"Hearts", "Diamonds", "Clubs", "Spades"};
        String[] values = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};

        for (String suit : suits) {
            for (String value : values) {
                cards.add(new Card(suit, value));
            }
        }
    }

    // Перетасовка колоды
    public void shuffle() {
        Collections.shuffle(cards);
    }

    // Сдача одной карты
    public Card dealCard() {
        if (!cards.isEmpty()) {
            return cards.remove(cards.size() - 1);
        } else {
            throw new IllegalStateException("No more cards in the deck.");
        }
    }

    // Возвращение карты в колоду
    public void returnCardToDeck(Card card) {
        if (!cards.contains(card)) {
            cards.add(card);
        } else {
            throw new IllegalArgumentException("Card already in the deck.");
        }
    }

    // Метод для печати состояния колоды
    public void printDeck() {
        for (Card card : cards) {
            System.out.println(card);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Deck deck = new Deck(); // Создаем новую колоду
        deck.shuffle();         // Перетасовываем колоду

        Card dealtCard = deck.dealCard(); // Сдача одной карты
        System.out.println("Dealt card: " + dealtCard);

        deck.returnCardToDeck(dealtCard); // Возвращаем карту обратно в колоду
        deck.printDeck();                 // Выводим состояние колоды
    }
}
